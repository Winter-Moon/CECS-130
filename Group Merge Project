//Lab section is 130-02

#include<iostream>
#include<string>
#include<cstdlib>
#include<ctime>

using namespace std;

/*
 1 | 2 | 3
-----------
 4 | 5 | 6
-----------
 7 | 8 | 9

 10 | 11 | 12
--------------
 13 | 14 | 15
--------------
 16 | 17 | 18

 19 | 20 | 21
--------------
 22 | 23 | 24
--------------
 25 | 26 | 27
*/

class Boardtype
{
	//members
	public:
	string slot1;
	string slot2;
	string slot3;
	string slot4;
	string slot5;
	string slot6;
	string slot7;
	string slot8;
	string slot9;
	string slot10;
	string slot11;
	string slot12;
	string slot13;
	string slot14;
	string slot15;
    string slot16;
	string slot17;
	string slot18;
	string slot19;
	string slot20;
	string slot21;
	string slot22;
	string slot23;
	string slot24;
	string slot25;
	string slot26;
	string slot27;


	//function
	void computerturn();
	void userturn();

	//constructor
	//initializing as null
	Boardtype()
	{
		string slot1;
		string slot2;
		string slot3;
		string slot4;
		string slot5;
		string slot6;
		string slot7;
		string slot8;
		string slot9;
		string slot10;
    	string slot11;
    	string slot12;
    	string slot13;
    	string slot14;
    	string slot15;
        string slot16;
    	string slot17;
    	string slot18;
    	string slot19;
    	string slot20;
    	string slot21;
    	string slot22;
    	string slot23;
    	string slot24;
    	string slot25;
    	string slot26;
    	string slot27;
	}
~Boardtype(){
}
};
class Tboard: public Boardtype{
	public:
	Tboard(){
	}
~Tboard(){
}
};


//creating object
Tboard board;

 
main()
{
	srand(time(NULL));
	int turn = rand()%2; //generating random first turn
	string firstturn;
	int remaining=27;
	int userscore=0;
	int aiscore=0;
	int i=0;
	
	//if 0 then computer starts first
	if(turn==0)
		firstturn="computer";
	else if(turn==1)     //if 1 then user starts first
		firstturn="user";


	cout<<"Welcome to the 3D Tic-Tac-Toe game.\n";
	cout<<"\nThe following is the layout you must use in order to play this game.\n";
	cout<<"\n1 | 2 | 3";
	cout<<"\n----------";
	cout<<"\n4 | 5 | 6";
	cout<<"\n----------";
	cout<<"\n7 | 8 | 9";
	cout<<"\n";
	cout<<"\n";
	cout<<"\n 10 | 11 | 12";
	cout<<"\n--------------";
	cout<<"\n 13 | 14 | 15";
	cout<<"\n--------------";
    cout<<"\n 16 | 17 | 18";
	cout<<"\n";
	cout<<"\n";
	cout<<"\n 19 | 20 | 21";
	cout<<"\n--------------";
	cout<<"\n 22 | 23 | 24";
	cout<<"\n--------------";
	cout<<"\n 25 | 26 | 27";

	cout<<"\n\nThis time the "<<firstturn<<" goes first.\n";

	while(i<27) //while board is not completely filled out AND game is not over
	{
		switch(turn)
		{
			case 0:
				//computer
				board.computerturn();
				remaining--; //once 1 turn has passed, subtract 1 unit from "remaining"
				turn=1;
				break;
			case 1:
				//user
				board.userturn();
				remaining--; //once 1 turn has passed, subtract 1 unit from "remaining"
				turn=0;
				break;
		}
		i++;
	}//END OF WHILE
		//checking if a player has won
		cout<<"out of while loop";
		
				//X-axis wins
				if(board.slot1=="O"&&board.slot2=="O"&&board.slot3=="O")
				{
					cout<<"\nComputer has won";
					aiscore++; 
					  
				}
				if(board.slot4=="O"&&board.slot5=="O"&&board.slot6=="O")
				{
					cout<<"\nComputer has won";
					aiscore++; 
					  
				}
				if(board.slot7=="O"&&board.slot8=="O"&&board.slot9=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot10=="O"&&board.slot11=="O"&&board.slot12=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				 if(board.slot13=="O"&&board.slot14=="O"&&board.slot15=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				 if(board.slot16=="O"&&board.slot17=="O"&&board.slot18=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot19=="O"&&board.slot20=="O"&&board.slot21=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				 if(board.slot22=="O"&&board.slot23=="O"&&board.slot24=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				 if(board.slot25=="O"&&board.slot26=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				//Y-axis wins
				if(board.slot1=="O"&&board.slot4=="O"&&board.slot7=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot2=="O"&&board.slot5=="O"&&board.slot8=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot3=="O"&&board.slot6=="O"&&board.slot9=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot10=="O"&&board.slot13=="O"&&board.slot16=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot11=="O"&&board.slot14=="O"&&board.slot17=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot12=="O"&&board.slot15=="O"&&board.slot18=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot19=="O"&&board.slot22=="O"&&board.slot25=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot20=="O"&&board.slot23=="O"&&board.slot26=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot21=="O"&&board.slot24=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				//Z-axis wins
				if(board.slot1=="O"&&board.slot10=="O"&&board.slot19=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot2=="O"&&board.slot11=="O"&&board.slot20=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot3=="O"&&board.slot12=="O"&&board.slot21=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot4=="O"&&board.slot13=="O"&&board.slot22=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot5=="O"&&board.slot14=="O"&&board.slot23=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot6=="O"&&board.slot15=="O"&&board.slot24=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot7=="O"&&board.slot16=="O"&&board.slot25=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot8=="O"&&board.slot17=="O"&&board.slot26=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot9=="O"&&board.slot18=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				//diagonal X-Y wins
				if(board.slot1=="O"&&board.slot5=="O"&&board.slot9=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot3=="O"&&board.slot5=="O"&&board.slot7=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot10=="O"&&board.slot14=="O"&&board.slot18=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot12=="O"&&board.slot14=="O"&&board.slot16=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot19=="O"&&board.slot23=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot21=="O"&&board.slot23=="O"&&board.slot25=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				//diagonal Y-Z wins
				if(board.slot3=="O"&&board.slot15=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot21=="O"&&board.slot15=="O"&&board.slot9=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot2=="O"&&board.slot14=="O"&&board.slot26=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot20=="O"&&board.slot14=="O"&&board.slot8=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot1=="O"&&board.slot13=="O"&&board.slot25=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot19=="O"&&board.slot13=="O"&&board.slot7=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				//diagonal X-Z wins
				if(board.slot1=="O"&&board.slot11=="O"&&board.slot21=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot3=="O"&&board.slot11=="O"&&board.slot19=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot4=="O"&&board.slot14=="O"&&board.slot24=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot6=="O"&&board.slot14=="O"&&board.slot22=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot7=="O"&&board.slot17=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot9=="O"&&board.slot17=="O"&&board.slot25=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				//diagonal X-Y-Z wins
				if(board.slot1=="O"&&board.slot14=="O"&&board.slot27=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot3=="O"&&board.slot14=="O"&&board.slot25=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot19=="O"&&board.slot14=="O"&&board.slot9=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
				if(board.slot21=="O"&&board.slot14=="O"&&board.slot7=="O")
				{
					cout<<"\nComputer has won";
					aiscore++;
					  
				}
			
				if(board.slot1=="X"&&board.slot2=="X"&&board.slot3=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot4=="X"&&board.slot5=="X"&&board.slot6=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot7=="X"&&board.slot8=="X"&&board.slot9=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot10=="X"&&board.slot11=="X"&&board.slot12=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot13=="X"&&board.slot14=="X"&&board.slot15=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot16=="X"&&board.slot17=="X"&&board.slot18=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot19=="X"&&board.slot20=="X"&&board.slot21=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot22=="X"&&board.slot23=="X"&&board.slot24=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot25=="X"&&board.slot26=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				//Y-axis wins
				if(board.slot1=="X"&&board.slot4=="X"&&board.slot7=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot2=="X"&&board.slot5=="X"&&board.slot8=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot3=="X"&&board.slot6=="X"&&board.slot9=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot10=="X"&&board.slot13=="X"&&board.slot16=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot11=="X"&&board.slot14=="X"&&board.slot17=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot12=="X"&&board.slot15=="X"&&board.slot18=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot19=="X"&&board.slot22=="X"&&board.slot25=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot20=="X"&&board.slot23=="X"&&board.slot26=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot21=="X"&&board.slot24=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				//Z-axis wins
				if(board.slot1=="X"&&board.slot10=="X"&&board.slot19=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot2=="X"&&board.slot11=="X"&&board.slot20=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot3=="X"&&board.slot12=="X"&&board.slot21=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot4=="X"&&board.slot13=="X"&&board.slot22=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot5=="X"&&board.slot14=="X"&&board.slot23=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot6=="X"&&board.slot15=="X"&&board.slot24=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot7=="X"&&board.slot16=="X"&&board.slot25=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot8=="X"&&board.slot17=="X"&&board.slot26=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot9=="X"&&board.slot18=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				//diagonal X-Y wins
				if(board.slot1=="X"&&board.slot5=="X"&&board.slot9=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot3=="X"&&board.slot5=="X"&&board.slot7=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot10=="X"&&board.slot14=="X"&&board.slot18=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot12=="X"&&board.slot14=="X"&&board.slot16=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot19=="X"&&board.slot23=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot21=="X"&&board.slot23=="X"&&board.slot25=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				//diagonal Y-Z wins
				if(board.slot3=="X"&&board.slot15=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot21=="X"&&board.slot15=="X"&&board.slot9=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot2=="X"&&board.slot14=="X"&&board.slot26=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot20=="X"&&board.slot14=="X"&&board.slot8=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot1=="X"&&board.slot13=="X"&&board.slot25=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot19=="X"&&board.slot13=="X"&&board.slot7=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				//diagonal X-Z wins
				if(board.slot1=="X"&&board.slot11=="X"&&board.slot21=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot3=="X"&&board.slot11=="X"&&board.slot19=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot4=="X"&&board.slot14=="X"&&board.slot24=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot6=="X"&&board.slot14=="X"&&board.slot22=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot7=="X"&&board.slot17=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot9=="X"&&board.slot17=="X"&&board.slot25=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				//diagonal X-Y-Z wins
				if(board.slot1=="X"&&board.slot14=="X"&&board.slot27=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot3=="X"&&board.slot14=="X"&&board.slot25=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot19=="X"&&board.slot14=="X"&&board.slot9=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				if(board.slot21=="X"&&board.slot14=="X"&&board.slot7=="X")
				{
					cout<<"\nUser has won";
					userscore++;
					  
				}
				

		if(aiscore==userscore) //if scores are the same, then it's a draw.
		cout<<"\nDraw!";

		//alternating turns
		if(turn==0)
			turn++;
		else if(turn==1)
			turn--;


	cout<<"user's score="<<userscore;
	cout<<"Ai's score="<<aiscore;
	
	cout<<"\n";
    system("pause");
}

void Boardtype::computerturn()
{
	int illegal=1;
	cout<<"\nComputer's turn";

	while(illegal==1)
	{
		int computermove = rand()%27+1; //generating random number from 1 to 27
		switch(computermove)  //using switch statement to mark the randomly generated position
		{
			case 1:
				if(slot1.empty()) //if position is empty, then proceed to mark
				{
					slot1="O";
					illegal=0; //set "illegal" to 0 to exit while loop
				}
				break;
			case 2:
				if(slot2.empty())
				{
					slot2="O";
					illegal=0;
				}
				break;
			case 3:
				if(slot3.empty())
				{
					slot3="O";
					illegal=0;
				}
				break;
			case 4:
				if(slot4.empty())
				{
					slot4="O";
					illegal=0;
				}
				break;
			case 5:
				if(slot5.empty())
				{
					slot5="O";
					illegal=0;
				}
				break;
			case 6:
				if(slot6.empty())
				{
					slot6="O";
					illegal=0;
				}
				break;
			case 7:
				if(slot7.empty())
				{
					slot7="O";
					illegal=0;
				}
				break;
			case 8:
				if(slot8.empty())
				{
					slot8="O";
					illegal=0;
				}
				break;
			case 9:
				if(slot9.empty())
				{
					slot9="O";
					illegal=0;
				}
				break;
			case 10:
				if(slot10.empty())
				{
					slot10="O";
					illegal=0;
				}
				break;
			case 11:
				if(slot11.empty())
				{
					slot11="O";
					illegal=0;
				}
				break;
			case 12:
				if(slot12.empty())
				{
					slot12="O";
					illegal=0;
				}
				break;
			case 13:
				if(slot13.empty())
				{
					slot13="O";
					illegal=0;
				}
				break;
			case 14:
				if(slot14.empty())
				{
					slot14="O";
					illegal=0;
				}
				break;
			case 15:
				if(slot15.empty())
				{
					slot15="O";
					illegal=0;
				}
				break;
			case 16:
				if(slot16.empty())
				{
					slot16="O";
					illegal=0;
				}
				break;
			case 17:
				if(slot17.empty())
				{
					slot17="O";
					illegal=0;
				}
				break;
			case 18:
				if(slot18.empty())
				{
					slot18="O";
					illegal=0;
				}
				break;
			case 19:
				if(slot19.empty())
				{
					slot19="O";
					illegal=0;
				}
				break;
			case 20:
				if(slot20.empty())
				{
					slot20="O";
					illegal=0;
				}
				break;
			case 21:
				if(slot21.empty())
				{
					slot21="O";
					illegal=0;
				}
				break;
			case 22:
				if(slot22.empty())
				{
					slot22="O";
					illegal=0;
				}
				break;
			case 23:
				if(slot23.empty())
				{
					slot23="O";
					illegal=0;
				}
				break;
			case 24:
				if(slot24.empty())
				{
					slot24="O";
					illegal=0;
				}
				break;
			case 25:
				if(slot25.empty())
				{
					slot25="O";
					illegal=0;
				}
				break;
			case 26:
				if(slot26.empty())
				{
					slot26="O";
					illegal=0;
				}
				break;
			case 27:
				if(slot27.empty())
				{
					slot27="O";
					illegal=0;
				}
				break;

		}
	}
	//printing board so user can see the progress of the game
	cout<<"\n"<<slot1<<" | "<<slot2<<" | "<<slot3;
	cout<<"\n----------";
	cout<<"\n"<<slot4<<" | "<<slot5<<" | "<<slot6;
	cout<<"\n----------";
	cout<<"\n"<<slot7<<" | "<<slot8<<" | "<<slot9;
	cout<<"\n";
	cout<<"\n";
	cout<<"\n"<<slot10<<" | "<<slot11<<" | "<<slot12;
	cout<<"\n--------------";
	cout<<"\n"<<slot13<<" | "<<slot14<<" | "<<slot15;
	cout<<"\n--------------";
	cout<<"\n"<<slot16<<" | "<<slot17<<" | "<<slot18;
	cout<<"\n";
	cout<<"\n";
	cout<<"\n"<<slot19<<" | "<<slot20<<" | "<<slot21;
	cout<<"\n--------------";
	cout<<"\n"<<slot22<<" | "<<slot23<<" | "<<slot24;
	cout<<"\n--------------";
	cout<<"\n"<<slot25<<" | "<<slot26<<" | "<<slot27;
}

void Boardtype::userturn()
{
	int illegal=1;
	int userinput;

	while(illegal==1)
	{
		cout<<"\nYour turn";
		cout<<"\nWhich slot would you like to mark?: ";
		cin>>userinput;

		switch(userinput)
		{
			case 1:
				if(slot1.empty()) //if position is empty then proceed to mark it
				{
					slot1="X";
					illegal=0; //set "illegal" to 0 to exit while loop
				}
				else //otherwise tell the user that this position is already marked
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 2:
				if(slot2.empty())
				{
					slot2="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 3:
				if(slot3.empty())
				{
					slot3="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 4:
				if(slot4.empty())
				{
					slot4="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 5:
				if(slot5.empty())
				{
					slot5="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 6:
				if(slot6.empty())
				{
					slot6="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 7:
				if(slot7.empty())
				{
					slot7="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 8:
				if(slot8.empty())
				{
					slot8="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 9:
				if(slot9.empty())
				{
					slot9="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 10:
				if(slot10.empty())
				{
					slot10="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 11:
				if(slot11.empty())
				{
					slot11="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 12:
				if(slot12.empty())
				{
					slot12="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
	        case 13:
				if(slot13.empty())
				{
					slot13="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 14:
				if(slot14.empty())
				{
					slot14="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 15:
				if(slot15.empty())
				{
					slot15="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 16:
				if(slot16.empty())
				{
					slot16="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 17:
				if(slot17.empty())
				{
					slot17="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 18:
				if(slot18.empty())
				{
					slot18="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 19:
				if(slot19.empty())
				{
					slot19="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 20:
				if(slot20.empty())
				{
					slot20="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 21:
				if(slot21.empty())
				{
					slot21="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 22:
				if(slot22.empty())
				{
					slot22="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 23:
				if(slot23.empty())
				{
					slot23="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 24:
				if(slot24.empty())
				{
					slot24="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 25:
				if(slot25.empty())
				{
					slot25="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 26:
				if(slot26.empty())
				{
					slot26="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			case 27:
				if(slot27.empty())
				{
					slot27="X";
					illegal=0;
				}
				else
				{
					cout<<"\nThis slot is already marked";
				}
				break;
			default:
				cout<<"\nPlease enter a valid number";
				break;
		}
	}
	//printing board so user can see the progress of the game
	cout<<"\n"<<slot1<<" | "<<slot2<<" | "<<slot3;
	cout<<"\n----------";
	cout<<"\n"<<slot4<<" | "<<slot5<<" | "<<slot6;
	cout<<"\n----------";
	cout<<"\n"<<slot7<<" | "<<slot8<<" | "<<slot9;
	cout<<"\n";
	cout<<"\n";
	cout<<"\n"<<slot10<<" | "<<slot11<<" | "<<slot12;
	cout<<"\n--------------";
	cout<<"\n"<<slot13<<" | "<<slot14<<" | "<<slot15;
	cout<<"\n--------------";
	cout<<"\n"<<slot16<<" | "<<slot17<<" | "<<slot18;
	cout<<"\n";
	cout<<"\n";
	cout<<"\n"<<slot19<<" | "<<slot20<<" | "<<slot21;
	cout<<"\n--------------";
	cout<<"\n"<<slot22<<" | "<<slot23<<" | "<<slot24;
	cout<<"\n--------------";
	cout<<"\n"<<slot25<<" | "<<slot26<<" | "<<slot27;

}
